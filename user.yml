## YAML Template.
---

activate:
  access: [admin]
  fill: teal
  validate: none
  desc: Activate inactive user
  audit: sql(select first_name, last_name, email from person where id = '$key')
  post:
    - sql_exec: update user set active = 1 where id = '$key'
    - sql_values: select concat(first_name, last_name) full_name, email from person where id = '$key'
    - send_email:
        from: $support
        to: $full_name <$email>
        subject: Your account has been activated
        message: >
          Dear <b>$full_name</b> <br><br>
          The administrator would like to inform you that your account has been activated for $program_name.<br><br>
          Regards,<br><br>
          <b>Customer Operations</b>
    - refresh: "#main table"

check_otp:
  type: input_page
  name: One Time Pin
  desc: >
    Please enter the OTP(One Time Pin) that you received on your email or cellphone.
    It is possible that the OTP email was sent to the Junk folder on your mail.
    <br><br>
    Note: If you navigated backwards to change something, you will be sent another OTP.
    Please make sure you enter this OTP instead of the first one.
  inputs:
    - otp
  values:
    - sql_values: select lpad(floor(rand()*9999),4,'0') server_otp, now() time_of_otp
    - write_session: server_otp,time_of_otp
    - read_session: email,first_name,last_name,cellphone
    - if $sms_otp:
        send_sms:
          message: Your OTP for $program_name is $server_otp
    - if $email_otp:
        send_email:
          subject: One Time Password
          from: $support
          to: $first_name $last_name <$email>
          message: >
            Good day<br><br>
            You are currently trying to register on $program_name or change your email address.
            If you have not requested this, please inform the System Adminstrator.<br><br>
            Your One Time Password is : <b>$server_otp</b>. <br><br>
            Regards<br>
            Customer Operations
    - clear_values

complete_registration:
  type: input_page
  desc: |
    Thank you. You have been provisionally registered. <be>
    You will have limited access to the system
    until your registration has been approved. <br>
    Please check your email for registration status.
  inputs:
    - template: none
    - type: button
    - start: { url: user/login, action: dialog, style: {margin-left: 50%,margin-right: 50%} }

confirm_registration:
  type: input_page
  desc: |
    Below is a list of all the information you have entered to register on the system.
    If you are happy with everything, please accept the terms and conditions to
    complete the registration process.
  inputs:
    - type: info_text
    - title
    - first_name
    - last_name
    - cellphone
    - email
    - password: { value: "**************" }
    - agree_terms: { type: checkbox}
  values:
    - read_session: title,first_name,last_name,cellphone,email
  validate: agree_terms
  post:
    - read_session: title,first_name,last_name,cellphone,email,password
    - sql_insert: [person,title,first_name,last_name,cellphone,email]
    - sql_values: select last_insert_id() person, password('$password') password, 1 active, 'reg' roles
    - sql_insert: [user,person,email,password,cellphone,active,roles]
    - sql_values: select last_insert_id() uid
    - write_session: uid
    - clear_values
  audit: $title $first_name $last_name $cellphone $email




create:
  type: labelled_input_page
  access: [admin]
  audit: >
    Title: $title, First Name:$first_name, Last Name:$last_name, Cellphone:$cellphone, E-Mail:$email, Role:$role
  width: 500
  name: Add User
  desc:  Add a new user
  inputs:
    - title: {type: dropdown}
    - first_name
    - last_name
    - cellphone
    - email
    - type: password_input
    - password
    - confirm_password
    - role: { type: dropdown }
  actions:
    - create

deactivate:
  access: [admin]
  fill: red
  validate: none
  desc: Deactivate this user
  confirmation: Are you sure you want to deactivate this user?
  audit: sql(select first_name, last_name, email from person where id = '$key')
  post:
    - sql_exec: update user set active = 0 where id = '$key'
    - sql_values: select concat(first_name, last_name) full_name, email from person where id = '$key'
    - send_email:
        from: $support
        to: $full_name <$email>
        subject: Your account has been deactivated
        message: >
          Dear <b>$full_name</b> <br><br>
          The administrator would like to inform you that your account has been deactivated for $program_name.<br><br>
          Regards,<br><br>
          <b>Customer Operations</b>
    - refresh: "#main table"

delete:
  type: deactivate

edit:
  access: [admin]
  action: dialog
  fill: black
  url: /user/modify

enter_credentials:
  name: User Credentials
  type: input_page
  desc: Fill in user information used to uniquely identify the user on the system
  inputs:
    - title: {type: dropdown}
    - first_name
    - last_name
    - cellphone
    - email: { valid: [not_registered] }
    - type: password_input
    - password
    - confirm_password
  post:
    - write_session: [title,first_name,last_name,cellphone,email,password]

history:
  access: [admin]
  type: datatable
  sort: when
  sort_order: desc
  flags:
    - show_titles
  fields:
    - when : { width: 14%, name: Time }
    - what: { width: 30%, name: Action }
    - detail: { width: 55% }
  sql: select create_time, action, detail from audit_trail where user = '$key'


is_active:
  valid: sql(select active from user where email = '$value')
  error: |
    Account $value has been deactivated.
    Please ask the administrator to reactivate your account

is_password_for:
  valid:
    - depends(email,email)
    - depends(email,is_registered)
    - depends(email,is_active)
    - depends(email,is_unlocked)
    - sql(select password=password('$value') from user where email = '$email')
  error:
    - sql_exec: update user set attempts = attempts+1 where email = '$email'
    - sql_exec: >
        insert into audit_trail(user, action, detail)
          select id, 'Failed Login Attempt', email from user where email = '$email'
    - error: Invalid user name or password for $email

is_registered:
  valid: sql(select 1 from user where email= '$value')
  error: >
    There is no such email '$value' registered on the system.<br>
    Click on <b>Register</b> if you would like to register to use the system.

is_unlocked:
  max_attempts: 5
  valid: sql(select attempts < $max_attempts from user where email = '$value')
  error: |
    Account $value locked because of too many incorrect attempts.
    Please ask the administrator to unlock your account.

list:
  access: [admin]
  type: datatable
  name: Users
  sort: create_time
  sort_order: desc
  page_size: 15
  flags:
    - filter
    - show_header
    - show_titles
  report_title: User Report
  row_actions:
    - activate
    - deactivate
    - edit: { action: dialog }
  footer_actions:
    - print
    - export
  fields:
    - key: { hide: yes }
    - create_time: { width: 17% }
    - email: { width: 20% }
    - first_name: { width: 13% }
    - last_name: { width: 13% }
    - cellphone: { width: 12% }
    - roles: { width: 9% }
    - status: { width: 8% }
    - style
    - actions
  expand:
    pages:
      - /user/history
  sql: >
    select id, create_time, email, first_name, last_name, cellphone, roles, status, status, actions from (
       select u.id, u.create_time, u.email, p.first_name, p.last_name,
        u.cellphone, group_concat(r.name) roles,
        if(u.active=1,'active','inactive') status,
        if(u.active=1,'expand,slide,edit,deactivate','expand,slide,edit,activate') actions
      from user u left join person p on p.id = u.person
        left join role r on find_in_set(r.code,u.roles)
      where u.partner = '$pid'
      group by u.id
    ) tmp where 1 = 1


list_all:
  name: System Users
  access: [admin]
  type: list
  fields:
    - organisation: { push: email }
  sql: >
    select id, create_time, company_name,  email, first_name, last_name, cellphone, roles, status, status, actions from (
       select u.id, u.create_time, u.email, p.first_name, p.last_name, org.name company_name,
        u.cellphone, group_concat(r.name) roles,
        if(u.active=1,'active','inactive') status,
        if(u.active=1,'expand,slide,edit,deactivate','expand,slide,edit,activate') actions
      from user u join partner org on u.partner = org.id and org.active = 1
        left join person p on p.id = u.person
        left join role r on find_in_set(r.code,u.roles)
      group by u.id
    ) tmp where 1 = 1


login:
  access: public
  type: input_page
  position: { my: 'top', at: 'top+150' }
  width: 560
  desc: Fill in your credentials below and click Login to logon
  enter: "#login"
  inputs:
    - email: { type: login_email }
    - login_password: { type: password }
  actions:
    - login
    - forgot_password: { action: dialog }
  post:
    - sql_values: |
        select u.id uid, partner pid, u.email user_email, first_name user_first_name, last_name user_last_name,
          concat(first_name, ' ', last_name) user_full_name,
          u.cellphone, roles, groups,  ifnull(start_page,'home') start_page
        from user u join person p on u.person = p.id
        where u.email='$email'
    - load_lineage: [roles,role,code,base_code]
    - sql_exec: update user set attempts = 0 where id = $uid
    - write_session: uid,pid,roles,user_email,user_first_name,user_last_name,user_full_name,cellphone
    - close_dialog
    - redirect: /$start_page

login_email:
  type: emailbox
  valid: [is_registered, is_active, is_unlocked]

login_password:
  name: Password
  valid: is_password_for(mail)

logout:
  post: [redirect: $landing_content]
  audit:
    detail: $email
    post: [call: session_destroy()]

modify:
  type: labelled_input_page
  desc: Change user details
  access: [admin]
  width: 600
  inputs:
    - title: {type: dropdown}
    - first_name
    - last_name
    - cellphone
    - email
    - role:
        name: Assigned Role
        type: dropdown
        valid: provided
  values:
    - sql_values: |
        select p.title,p.first_name,p.last_name,u.cellphone,u.email,group_concat(r.name) role
        from user u left join person p on p.id = u.person
          left join role r on find_in_set(r.code,u.roles)
        where u.id = '$key'
        group by u.id

  actions:
    - modify: { name: Update User Details }
  validate: delta
  post:
    - read_values:
        id: $key
        roles: $role
        person: /(select person from user where id = '$key')
    - sql_update: [user, id, delta]
    - sql_update: [person, {id: $person}, delta]
    - clear_values
    - close_dialog: User details updated
    - refresh: "#main table"
  audit: $email $delta

not_registered:
  valid: not(is_registered($1))
  error: |
    User $value is already registered on the system. If you have forgotten the
    password, use <i>Login/Forgot Password</i> feature to reset your password.

otp:
  name: OTP
  desc: One Time Pin
  valid: >
    sql(select 1 from dual where timestampdiff(minute, '$time_of_otp', now()) < 30 and '$otp'='$server_otp')


profile:
  type: input_page
  access: [reg]
  name: View Own Profile
  desc: These are your details on the system. You can make changes here to update them.
  width: 600
  inputs:
    - title: {type: dropdown}
    - first_name
    - last_name
    - cellphone
    - email
    - role: { attr: disabled }
  values:
    - sql_values: |
        select p.title,p.first_name,p.last_name,u.cellphone,u.email,group_concat(r.name) role
        from user u join person on u.email = p.email
          left join role r on find_in_set(r.code,u.roles)
        where u.id = '$uid'
        group by u.id
  actions:
    - profile_update:
        validate: [title,first_name,last_name,email_address,cellphone]

profile_update:
  name: Update Profile
  audit: $title $first_name $last_name $cellphone $email
  post:
    - sql_values: select id, person from user where id = '$uid'
    - sql_update: [user,id,email]
    - read_values: {id : $person}
    - sql_update: [person,id,title,first_name,last_name,cellphone,email]
    - close_dialog: Successfully updated


register:
  access: public
  position: { my: 'top', at: 'top+50' }
  type: wizard
  name: Register User
  desc: Register as a new user of the system
  width: 900
  steps:
    - enter_credentials
    - check_otp: { clear: true }
    - confirm_registration: { clear: true}
    - complete_registration: {name: Completion,prev: false}
